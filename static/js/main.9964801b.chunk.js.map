{"version":3,"sources":["components/UserRepos.js","serviceWorker.js","index.js"],"names":["UserRepos","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getUrlParam","url_string","window","location","href","username","URL","searchParams","get","setState","name","getRepos","handleChange","event","target","value","handleSubmit","preventDefault","state","getData","data","repos","values","forEach","push","url","html_url","description","id","concat","fetch","then","response","ok","json","alert","Error","catch","error","console","log","react_default","a","createElement","onSubmit","className","placeholder","type","onChange","map","key","React","Component","Boolean","hostname","match","ReactDOM","render","components_UserRepos","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAqGeA,cAlGb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFI,YAAc,WACZ,IAAMC,EAAaC,OAAOC,SAASC,KAE7BC,EADM,IAAIC,IAAIL,GACCM,aAAaC,IAAI,YAClCH,IACFZ,EAAKgB,SAAS,CAACC,KAAML,IACrBZ,EAAKkB,SAASN,KAfLZ,EAuBbmB,aAAe,SAAAC,GACbpB,EAAKgB,SAAS,CAACC,KAAMG,EAAMC,OAAOC,SAxBvBtB,EA2BbuB,aAAe,SAAAH,GACbA,EAAMI,iBACN,IAAMP,EAAOjB,EAAKyB,MAAMR,KACxBjB,EAAKkB,SAASD,IA9BHjB,EAiCb0B,QAAU,WACR,IAAMC,EAAO,GACPC,EAAQ5B,EAAKyB,MAAMG,MAEzB3B,OAAO4B,OAAOD,GAAOE,QAAQ,SAAAR,GAC3BK,EAAKI,KAAK,CACNC,IAAQV,EAAMW,SACdC,YAAgBZ,EAAMY,YACtBC,GAAOb,EAAMa,OAInBnC,EAAKgB,SAAS,CAACW,KAAMA,KA7CV3B,EAgDbkB,SAAW,SAAAD,GACT,IAAMe,EAAG,gCAAAI,OAAmCnB,EAAnC,UACLA,EACFoB,MAAML,GACLM,KAAK,SAAAC,GACJ,GAAGA,EAASC,GAAI,OAAOD,EAASE,OAEhC,MADAC,MAAM,mBACA,IAAIC,MAAM,qBAEjBL,KAAK,SAAAX,GACJ3B,EAAKgB,SAAS,CACZY,MAAOD,IAET3B,EAAK0B,YAENkB,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZH,MAAMG,KAGRH,MAAM,uBAlER1C,EAAKyB,MAAQ,CACXR,KAAM,GACNW,MAAO,GACPD,KAAM,IALG3B,mFAoBXG,KAAKI,+CAqDL,IAAMoB,EAAOxB,KAAKsB,MAAME,KAExB,OACEqB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,SAAUhD,KAAKoB,aAAc6B,UAAU,eAC3CJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOG,YAAY,YAAYC,KAAK,OAAOhC,MAAOnB,KAAKsB,MAAMR,KAAMsC,SAAUpD,KAAKgB,aAAciC,UAAU,kBAE5GJ,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAAShC,MAAM,mBAAmB8B,UAAU,uBAE1DJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,WACXzB,EAAK6B,IAAI,SAAC7B,GACT,OACEqB,EAAAC,EAAAC,cAAA,MAAIO,IAAK9B,EAAKQ,GAAIiB,UAAU,iBAC1BJ,EAAAC,EAAAC,cAAA,KAAGvC,KAAMgB,EAAKK,IAAKoB,UAAU,gBAAgBzB,EAAKK,KAClDgB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,uBAAuBzB,EAAKO,yBAzFjCwB,IAAMC,WCUVC,QACW,cAA7BnD,OAAOC,SAASmD,UAEe,UAA7BpD,OAAOC,SAASmD,UAEhBpD,OAAOC,SAASmD,SAASC,MACvB,2DCXNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAeC,SAASC,eAAe,SD0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.9964801b.chunk.js","sourcesContent":["import React from 'react';\n\nclass UserRepos extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      name: '',\n      repos: [],\n      data: []\n    };\n  }\n\n  getUrlParam = () => {\n    const url_string = window.location.href;\n    const url = new URL(url_string);\n    const username = url.searchParams.get(\"username\");\n    if (username) {\n      this.setState({name: username});\n      this.getRepos(username);\n    }\n  }\n\n  componentDidMount() {\n    this.getUrlParam();\n  }\n\n  handleChange = event => {\n    this.setState({name: event.target.value});\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const name = this.state.name;\n    this.getRepos(name);\n  }\n\n  getData = () => {\n    const data = [];\n    const repos = this.state.repos;\n\n    Object.values(repos).forEach(value => {\n      data.push({\n          \"url\" : value.html_url,\n          \"description\" : value.description,\n          \"id\" : value.id\n        })\n    });\n\n    this.setState({data: data})\n  }\n\n  getRepos = name => {\n    const url = `https://api.github.com/users/${name}/repos`;\n    if (name) {\n      fetch(url)\n      .then(response => {\n        if(response.ok) return response.json();\n        alert('Request failed.');\n        throw new Error('Request failed.');\n      })\n      .then(data => {\n        this.setState({\n          repos: data\n        });\n        this.getData();\n      })\n      .catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    } else {\n      alert('Please enter name.')\n    }\n  }\n\n  render() {\n    const data = this.state.data;\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit} className='search-form'>\n          <label>\n            <input placeholder=\"User Name\" type=\"text\" value={this.state.name} onChange={this.handleChange} className='search-input' />\n          </label>\n          <input type=\"submit\" value=\"Get repositories\" className='search-submit-btn' />\n        </form>\n        <ul className='results'>\n          {data.map((data) => {\n            return (\n              <li key={data.id} className='results-items'>\n                <a href={data.url} className='results-link'>{data.url}</a>\n                <p className='results-description'>{data.description}</p>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default UserRepos;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport UserRepos from './components/UserRepos';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<UserRepos />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}