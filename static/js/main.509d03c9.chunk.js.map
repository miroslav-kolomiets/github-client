{"version":3,"sources":["components/Loader/loader.svg","components/Loader/Loader.js","components/Dashboard/Dashboard.js","components/SearchForm/SearchForm.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loader","react_default","a","createElement","className","src","loader","alt","React","Component","Dashboard","data","this","props","map","key","id","href","url","description","SearchForm","_this$props","handleChange","handleSubmit","name","onSubmit","placeholder","type","value","onChange","Footer","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getUrlParam","url_string","window","location","username","URL","searchParams","get","setState","getRepos","event","target","preventDefault","state","getData","repos","values","forEach","push","html_url","concat","fetch","then","response","ok","json","alert","Error","isLoading","catch","error","console","log","Fragment","components_SearchForm_SearchForm","components_Loader_Loader","components_Dashboard_Dashboard","components_Footer_Footer","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.509d03c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.fb5bf093.svg\";","import React from 'react';\nimport loader from '../Loader/loader.svg';\nimport './Loader.css';\n\nclass Loader extends React.Component {\n\n    render() {\n        return (\n            <div className=\"loader-wrapper\">\n                <p className=\"loader-heading\">Please provide user name in form above.</p>\n                <img src={loader} alt=\"Loader\" className=\"loader\"/>\n            </div>\n        )\n    }\n}\n\nexport default Loader;\n","import React from 'react';\nimport './Dashboard.css';\n\nclass Dashboard extends React.Component {\n\n  render() {\n    const data = this.props.data;\n\n    return (\n      <div>\n        <ul className='results'>\n          {data.map((data) => {\n            return (\n              <li key={data.id} className='results-items'>\n                <a href={data.url} className='results-link'>{data.url}</a>\n                <p className='results-description'>{data.description}</p>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './SearchForm.css';\n\nclass SearchForm extends React.Component {\n\n  render() {\n    const {handleChange, handleSubmit, name} = this.props;\n    \n    return (\n      <div>\n        <form \n            onSubmit={handleSubmit} \n            className='search-form'\n        >\n          <label>\n            <input \n                placeholder=\"User Name\" \n                type=\"text\" \n                value={name} \n                onChange={handleChange} \n                className='search-input' \n            />\n          </label>\n          <input type=\"submit\" value=\"Get repositories\" className='search-submit-btn' />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default SearchForm;\n","import React from 'react';\nimport './Footer.css';\n\nclass Footer extends React.Component {\n\n  render() {\n    \n    return (\n      <footer className=\"footer\">\n          <p>JS-school homework 2019</p>\n      </footer>\n    )\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport Loader from './components/Loader/Loader';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport SearchForm from './components/SearchForm/SearchForm';\nimport Footer from './components/Footer/Footer';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      name: '',\n      repos: [],\n      data: [],\n      isLoading: true\n    };\n  }\n\n  getUrlParam = () => {\n    const url_string = window.location.href;\n    const url = new URL(url_string);\n    const username = url.searchParams.get(\"username\");\n    if (username) {\n      this.setState({name: username});\n      this.getRepos(username);\n    }\n  }\n\n  componentDidMount() {\n    this.getUrlParam();\n  }\n\n  handleChange = event => {\n    this.setState({name: event.target.value});\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const name = this.state.name;\n    this.getRepos(name);\n  }\n\n  getData = () => {\n    const data = [];\n    const repos = this.state.repos;\n\n    Object.values(repos).forEach(value => {\n      data.push({\n          \"url\" : value.html_url,\n          \"description\" : value.description,\n          \"id\" : value.id\n        })\n    });\n\n    this.setState({data: data})\n  }\n\n  getRepos = name => {\n    const url = `https://api.github.com/users/${name}/repos`;\n    if (name) {\n      fetch(url)\n      .then(response => {\n        if(response.ok) return response.json();\n        alert('Request failed.');\n        throw new Error('Request failed.');\n      })\n      .then(data => {\n        this.setState({\n          repos: data,\n          isLoading: false\n        });\n        this.getData();\n      })\n      .catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    } else {\n      alert('Please enter name.')\n    }\n  }\n\n  render() {\n    const data = this.state.data;\n    const isLoading = this.state.isLoading;\n\n    return (\n        <React.Fragment>\n            <div className=\"content\">\n                <SearchForm \n                    name={this.state.name}\n                    handleChange={this.handleChange}\n                    handleSubmit={this.handleSubmit}\n                />\n                {isLoading ? <Loader /> : <Dashboard data={data}/>}\n            </div>\n            <Footer />\n        </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}